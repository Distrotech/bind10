What is needed:

 - full IPv6 support (so at least Vista or Server 2008,
  tested on Server 2008 x86 and Windows 7 x86_64)

 - POSIX (aka Unix) environment for tar/git/etc (I use cygwin)

 - Visual Studio C++ (versions 2008 and 2010 were tested,
  (note older versions could fail to correctly compile,
  cf. C4373 warning), 2010 express and 64 bit support
  from the 7.1 SDK work too)

 - python >= 3.1 (I got Cpython 3.2 MSI from python.org,
  note the pre-built python can give C++ runtime issue with
  an incompatible Visual Studio, and botan wants a version 2
  for configuration. Current python has no socket.inet_ntop /
  socket.inet_pton or _d.lib, so I recommend to recompile it)

 - perl (the Windows native one)

 - sqlite3 >= 3.3.9 (got the 3.7.6 prebuilds but the distrib
  is needed to get/build the .h and .lib file) (note for the second
  'lib /def:C:\path\to\sqlite3.def /out:C:\path\to\sqlite3.lib /machine:x86')

 - splite3 python DSO (included in the Python MSI)

 - cmakefile (got the 2.8.4 .exe, can be used but see below)

 - google test (aka gtest, got the 1.[56].0 sources but some recent
  tests require >= 1.6.0)

 - boost >= 1.35 (got the 1.44/1.47 setup from Boostpro, installed
  Multithread and Multithread Debug)

 - setproctitle python module (in theory)

 - botan 1.8.x (compiled from sources to control things, i.e.,
  tried to factorize the (in)convenience with gtest. Note its
  config phase requires a python2. Tested with a 1.10.x too)

 - log4cplus (compiled from sources in the same style...
  Note WIN32 disables syslog support. In VS2010 solution/project
  files are required, the subversion URL is
  https://log4cplus.svn.sourceforge.net/svnroot/log4cplus
  and the PRODUCTION_1_0_x branch includes a msvc10 directory)

Environment variables (with examples):

 - BOOST -> C:\Program Files\boost\boost_1_44

 - BIND10HOME -> c:/cygwin/home/dupont/bind10

How to compile google test:

 - remove the /MD -> /MT line in the CMakeLists.txt, use cmake

 - *or* open the solution gtest-md in msvc (please note the rights
  of files in this directory must be fixed before)

 - please remember the same Visual Studio version must be used
  for gtest and bind10

 - msvc gives the gtestd.lib (in place of gtest.lib) for the debug version

How to recompile python:

 - solution file is in PCbuild/pcbuild.sln

 - patch socketmodule.h with (can replace WIN7 by WS08, etc):

#else /* MS_WINDOWS */
# define NTDDI_VERSION NTDDI_WIN7
# define WINVER _WIN32_WINNT_WIN7
# define _WIN32_WINNT _WIN32_WINNT_WIN7
# include <ws2tcpip.h>
/* VC6 is shipped with old platform headers, and does not have MSTcpIP.h
 * Separate SDKs have all the functions we want, but older ones don't have
 * any version information.
 * I use SIO_GET_MULTICAST_FILTER to detect a decent SDK.
 */
# ifdef SIO_GET_MULTICAST_FILTER
#  include <MSTcpIP.h> /* for SIO_RCVALL */
#  define HAVE_ADDRINFO
#  define HAVE_SOCKADDR_STORAGE
#  define HAVE_GETADDRINFO
#  define HAVE_GETNAMEINFO
#  define HAVE_INET_NTOP
#  define HAVE_INET_PTON
#  define ENABLE_IPV6
# else

Where I put things (hardwired paths):

 - <home>\bind10 for bind10 (BIND10HOME environment variable)

 - <home>\gtest\include

 - <home>\gtest\md10\{Debug,Release} gtest{d,}.lib and vc100.[ip]db, or,
   <home>\gtest\md9\{Debug,Release} gtest{d,}.lib and vc90.[ip]db

 - <home>\botan\include and <home>\botan\md{9,10}\{Debug,Release}
   (--disable-shared to get static libs, no DLL)

 - <home>\log4cplus\include and <home>\log4cplus\md{9,10}\{Debug,Release}

 - "C:\Program Files\boost\boost_1_44" (the include and
  sometimes the libraries (in lib, called by the auto_link) too,
  BOOST environment variable)

 - C:\Python32 (update your PATH, same for perl)

 - C:\sqlite3 (don't forget to copy the DLL in a place in the PATH,
  on Window7 I can't get the permissions right but it works by putting
  the DLL directory in the PATH)

How to compile:

 - open win32build\VS2010\bind10.sln file with Visual Studio 2010, or,
   open win32build\VS2008\bind10.sln file with Visual Studio 2008

 - fix the paths (\ becomes \\\ in grep/ed/etc)

 - build

 - partial or todo directory ports are marked

Random notes (for porting new code):
 - getopt() is *not* standard (got working getopt.{h,cc})
 - inet_pton() requires >= Vista/2008
 - forget lcov/pycoverage
 - cmake?

 - ifdefs: _WIN32 and _MSC_VER
 - for(int i; ... -very-often-> for(unsigned int i; ...
 - *no* <unistd.h> (or network includes)
 - <sys/time.h> -> <time.h>
 - missing general defines -> include <config.h> in front
 - missing less general defines -> conditionally include <winsock2.h>
 - missing TCP/IP defines -> conditionally include <ws2tcpip.h>
  and perhaps <mswsock> too *before* asio
 - integer posix types -> include <stdint.h> (or <cstdint>)
 - "this" used too soon -> move to body
 - "=" with contants: standard private C4512 declaration
 - reuse_address is different in Windows
 - missing namespace:
  * error_code -> asio::error_code (both type and function)
  * shared_ptr -> boost::shared_ptr
 - *no* PF_UNIX (aka asio::local) sockets
 - *no* fork() (but can use threads)
 - unused variable in catch: simply remove it
 - sleep() or nanosleep() -> Sleep()
 - gettimeofday() -> GetSystemTimeAsFileTime() - SystemTimeToFileTime(epoch)
 - underscored function names: _getid, _read, _write (caution: convert
  the handle before), 
 - defined misc names: min, max, IN, ERROR, NOERROR
 - different names: close -> closesocket (and error is INVALID_SOCKET
  not < 0), errno -> WSAGetLastError()
 - different declarations: send, recv, 
 - WSAStartup/WSACleanup in main()

Test status: (unittests failures)
 b10-dhcp6: can't work as Windows has no loopback interface...

