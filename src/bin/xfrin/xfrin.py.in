#!@PYTHON@

# Copyright (C) 2010  Internet Systems Consortium.
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SYSTEMS CONSORTIUM
# DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
# INTERNET SYSTEMS CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
# FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# $Id$

import sys; sys.path.append ('@@PYTHONPATH@@')
import os
import signal
import isc
import struct
import threading
import socket
import select
import random
import time
from errno import EALREADY, EINPROGRESS, EWOULDBLOCK, ECONNRESET, \
        ENOTCONN, ESHUTDOWN, EINTR, EISCONN, EBADF, ECONNABORTED, errorcode

from optparse import OptionParser, OptionValueError
from isc.config.ccsession import *
try:
    from libdns_python import *
except ImportError as e:
    # C++ loadable module may not be installed; even so the xfrin process
    # must keep running, so we warn about it and move forward.
    sys.stderr.write('[b10-xfrin] failed to import DNS module: %s\n' % str(e))

# If B10_FROM_BUILD is set in the environment, we use data files
# from a directory relative to that, otherwise we use the ones
# installed on the system
if "B10_FROM_BUILD" in os.environ:
    SPECFILE_PATH = os.environ["B10_FROM_BUILD"] + "/src/bin/xfrin"
    AUTH_SPECFILE_PATH = os.environ["B10_FROM_BUILD"] + "/src/bin/auth"
else:
    PREFIX = "@prefix@"
    DATAROOTDIR = "@datarootdir@"
    SPECFILE_PATH = "@datadir@/@PACKAGE@".replace("${datarootdir}", DATAROOTDIR).replace("${prefix}", PREFIX)
    AUTH_SPECFILE_PATH = SPECFILE_PATH
SPECFILE_LOCATION = SPECFILE_PATH + "/xfrin.spec"
AUTH_SPECFILE_LOCATION = AUTH_SPECFILE_PATH + "/auth.spec"


__version__ = 'BIND10'
# define xfrin rcode
XFRIN_OK = 0
XFRIN_FAIL = 1

DEFAULT_MASTER_PORT = '53'

def log_error(msg):
    sys.stderr.write("[b10-xfrin] %s\n" % str(msg))

class XfrinException(Exception): 
    pass

class XfrinConnection:
    '''Do xfrin in this class. '''    

    def __init__(self,
                 conn_socket, zone_name, rrclass, db_file, shutdown_flag,
                 master_addrinfo, verbose = False, idle_timeout = 60): 
        ''' idle_timeout: max idle time for read data from socket.
            db_file: specify the data source file.
            check_soa: when it's true, check soa first before sending xfr query
        '''
        self._socket = socket.socket(master_addrinfo[0], master_addrinfo[1])
        self._socket.setblocking(1)
        self._conn_socket = conn_socket
        self._zone_name = zone_name
        self._rrclass = rrclass
        self._db_file = db_file
        self._soa_rr_count = 0
        self._idle_timeout = idle_timeout
        self._shutdown_flag = shutdown_flag
        self._verbose = verbose
        self._master_address = master_addrinfo[4]
    
    def connect(self, address):
        err = self._socket.connect_ex(address)
        if err in (EINPROGRESS, EALREADY, EWOULDBLOCK):
            return 
        if err not in (0, EISCONN):
            raise socket.error(err, errorcode[err])

    def send(self, data):
        try:
            result = self._socket.send(data)
            return result
        except socket.error as why:
            if why.args[0] == EWOULDBLOCK:
                return 0
            elif why.args[0] in (ECONNRESET, ENOTCONN, ESHUTDOWN, ECONNABORTED):
                self.close()
                return 0
            else:
                raise

    def recv(self, buffer_size):
        try:
            data = self._socket.recv(buffer_size)
            if not data:
                self.close()
                return b''
            else:
                return data
        except socket.error as why:
            # winsock sometimes throws ENOTCONN
            if why.args[0] in [ECONNRESET, ENOTCONN, ESHUTDOWN, ECONNABORTED]:
                self.close()
                return b''
            else:
                raise

    def close(self):
        try:
            self._socket.close()
        except socket.error as why:
            if why.args[0] not in (ENOTCONN, EBADF):
                raise

    def connect_to_master(self):
        '''Connect to master in TCP.'''

        try:
            self.connect(self._master_address)
            return True
        except socket.error as e:
            self.log_msg('Failed to connect:(%s), %s' % (self._master_address,
                                                                    str(e)))
            return False

    def _create_query(self, query_type):
        '''Create dns query message. '''

        msg = Message(Message.RENDER)
        query_id = random.randint(0, 0xFFFF)
        self._query_id = query_id
        msg.set_qid(query_id)
        msg.set_opcode(Opcode.QUERY())
        msg.set_rcode(Rcode.NOERROR())
        query_question = Question(Name(self._zone_name), self._rrclass, query_type)
        msg.add_question(query_question)
        return msg


    def _send_data(self, data):
        size = len(data)
        total_count = 0
        while total_count < size:
            count = self.send(data[total_count:])
            total_count += count

    def _send_query(self, query_type):
        '''Send query message over TCP. '''

        msg = self._create_query(query_type)
        render = MessageRenderer()
        msg.to_wire(render)
        header_len = struct.pack('H', socket.htons(render.get_length()))

        self._send_data(header_len)
        self._send_data(render.get_data())

    def _loop(self):
        try:
            rlist, wlist, elist = select.select([self._socket, self._conn_socket], \
                    [], [], self._idle_timeout)
        except select.error as err:
            if err.args[0] != EINTR:
                raise
            else:
                return
        for s in rlist:
            if s == self._conn_socket:
                raise XfrinException("shutdown xfrin!")
            self.handle_read()
            
    
    def _get_request_response(self, size):
        recv_size = 0
        data = b''
        while recv_size < size:
            self._recv_time_out = True
            self._need_recv_size = size - recv_size
            self._loop()
            if self._recv_time_out:
                raise XfrinException('receive data from socket time out.')

            recv_size += self._recvd_size
            data += self._recvd_data

        return data

    def _check_soa_serial(self):
        ''' Compare the soa serial, if soa serial in master is less than
        the soa serial in local, Finish xfrin.
        False: soa serial in master is less or equal to the local one.
        True: soa serial in master is bigger
        '''

        self._send_query(RRType("SOA"))
        data_len = self._get_request_response(2)
        msg_len = socket.htons(struct.unpack('H', data_len)[0])
        soa_response = self._get_request_response(msg_len)
        msg = Message(Message.PARSE)
        msg.from_wire(soa_response)

        # perform some minimal level validation.  It's an open issue how
        # strict we should be (see the comment in _check_response_header())
        self._check_response_header(msg)

        # TODO, need select soa record from data source then compare the two 
        # serial, current just return OK, since this function hasn't been used
        # now.
        return XFRIN_OK

    def do_xfrin(self, check_soa, ixfr_first = False):
        '''Do xfr by sending xfr request and parsing response. '''
        try:
            ret = XFRIN_OK
            if check_soa:
                logstr = 'SOA check for \'%s\' ' % self._zone_name
                ret =  self._check_soa_serial()

            logstr = 'transfer of \'%s\': AXFR ' % self._zone_name
            if ret == XFRIN_OK:
                self.log_msg(logstr + 'started')
                # TODO: .AXFR() RRType.AXFR()
                self._send_query(RRType(252))
                isc.datasrc.sqlite3_ds.load(self._db_file, self._zone_name,
                                            self._handle_xfrin_response)
                self.log_msg(logstr + 'succeeded')
                ret = XFRIN_OK

        except XfrinException as e:
            self.log_msg(e)
            self.log_msg(logstr + 'failed')
            ret = XFRIN_FAIL
            #TODO, recover data source. and exception from self._handle_xfrin_response
        except isc.datasrc.sqlite3_ds.Sqlite3DSError as e:
            self.log_msg(e)
            self.log_msg(logstr + 'failed')
            ret = XFRIN_FAIL
        except UserWarning as e:
            # XXX: this is an exception from our C++ library via the
            # Boost.Python binding.  It would be better to have more more
            # specific exceptions, but at this moment this is the finest
            # granularity.
            self.log_msg(e)
            self.log_msg(logstr + 'failed')
            ret = XFRIN_FAIL
        finally:
            self.close()
            self._conn_socket.close()
        return ret

    def _check_response_header(self, msg):
        '''Perform minimal validation on responses'''

        # It's not clear how strict we should be about response validation.
        # BIND 9 ignores some cases where it would normally be considered a
        # bogus response.  For example, it accepts a response even if its
        # opcode doesn't match that of the corresponding request.
        # According to an original developer of BIND 9 some of the missing
        # checks are deliberate to be kind to old implementations that would
        # cause interoperability trouble with stricter checks.

        msg_rcode = msg.get_rcode()
        if msg_rcode != Rcode.NOERROR():
            raise XfrinException('error response: %s' % msg_rcode.to_text())

        if not msg.get_header_flag(MessageFlag.QR()):
            raise XfrinException('response is not a response ')

        if msg.get_qid() != self._query_id:
            raise XfrinException('bad query id')

    def _check_response_status(self, msg):
        '''Check validation of xfr response. '''

        self._check_response_header(msg)

        if msg.get_rr_count(Section.ANSWER()) == 0:
            raise XfrinException('answer section is empty')

        if msg.get_rr_count(Section.QUESTION()) > 1:
            raise XfrinException('query section count greater than 1')

    def _handle_answer_section(self, answer_section):
        '''Return a generator for the reponse in one tcp package to a zone transfer.'''

        for rrset in answer_section:
            rrset_name = rrset.get_name().to_text()
            rrset_ttl = int(rrset.get_ttl().to_text())
            rrset_class = rrset.get_class().to_text()
            rrset_type = rrset.get_type().to_text()

            for rdata in rrset.get_rdata():
                # Count the soa record count
                if rrset.get_type() == RRType("SOA"):
                    self._soa_rr_count += 1

                    # XXX: the current DNS message parser can't preserve the
                    # RR order or separete the beginning and ending SOA RRs.
                    # As a short term workaround, we simply ignore the second
                    # SOA, and ignore the erroneous case where the transfer
                    # session doesn't end with an SOA.
                    if (self._soa_rr_count == 2):
                        # Avoid inserting soa record twice
                        break

                rdata_text = rdata.to_text()
                yield (rrset_name, rrset_ttl, rrset_class, rrset_type,
                       rdata_text)

    def _handle_xfrin_response(self):
        '''Return a generator for the response to a zone transfer. '''
        while True:
            data_len = self._get_request_response(2)
            msg_len = socket.htons(struct.unpack('H', data_len)[0])
            recvdata = self._get_request_response(msg_len)
            msg = Message(Message.PARSE)
            msg.from_wire(recvdata)
            self._check_response_status(msg)
            
            answer_section = msg.get_section(Section.ANSWER())
            for rr in self._handle_answer_section(answer_section):
                yield rr

            if self._soa_rr_count == 2:
                break
            
            if self._shutdown_flag:
                raise XfrinException('xfrin is forced to stop')

    def handle_read(self):
        '''Read query's response from socket. '''
        self._recvd_data = self.recv(self._need_recv_size)
        if(len(self._recvd_data)==0):
            raise XfrinException("receive data from socket error!")
        self._recvd_size = len(self._recvd_data)
        self._recv_time_out = False

    def log_info(self, msg, type='info'):
        # Overwrite the log function, log nothing
        pass

    def log_msg(self, msg):
        if self._verbose:
            sys.stdout.write('[b10-xfrin] %s\n' % str(msg))


def process_xfrin(zone_name, rrclass, db_file, 
                  shutdown_flag, master_addrinfo, check_soa, conn_socket, verbose):
    conn = XfrinConnection(conn_socket, zone_name, rrclass, db_file,
                           shutdown_flag, master_addrinfo, verbose)
    if conn.connect_to_master():
        conn.do_xfrin(check_soa)

class Xfrin:
    def __init__(self, verbose = False):
        self._max_transfers_in = 10
        self._cc_setup()
        self._shutdown_flag = 0
        self._verbose = verbose

        #the item in self._threads_zones: zone name and xfr communication thread. 
        #The item in self._conn_sockets: a socket and xfr communication thread, the main thread uses 
        #the socket to communicate with this xfr communication thread.
        self._threads_zones = {}
        self._conn_sockets = {}

    def _cc_setup(self):
        '''
This method is used only as part of initialization, but is implemented
separately for convenience of unit tests; by letting the test code override
this method we can test most of this class without requiring a command channel.
'''
        self._cc = isc.config.ModuleCCSession(SPECFILE_LOCATION,
                                              self.config_handler,
                                              self.command_handler)
        self._cc.start()
        config_data = self._cc.get_full_config()
        self._max_transfers_in = config_data.get("transfers_in")

    def _cc_check_command(self):
        '''
This is a straightforward wrapper for cc.check_command, but provided as
a separate method for the convenience of unit tests.
'''
        self._cc.check_command()

    def config_handler(self, new_config):
        # TODO, process new config data
        self._max_transfers_in = new_config.get("transfers_in") or self._max_transfers_in
        return create_answer(0)

    def shutdown(self):
        ''' shutdown the xfrin process. the thread which is doing xfrin will be 
        terminated.
        '''
        self._filter_hash(self._conn_sockets)
        for fd in self._conn_sockets.keys():
            fd.send(b"shutdown")

        self._shutdown_flag = 1
        main_thread = threading.currentThread()
        for th in threading.enumerate():
            if th is main_thread:
                continue
            th.join()

    def command_handler(self, command, args):
        answer = create_answer(0)
        try:
            if command == 'shutdown':
                self._shutdown_flag = 1
            elif command == 'retransfer' or command == 'refresh':
                # The default RR class is IN.  We should fix this so that
                # the class is passed in the command arg (where we specify
                # the default)
                rrclass = RRClass.IN()
                zone_name, master_addr, db_file = self._parse_cmd_params(args)
                ret = self.xfrin_start(zone_name, rrclass, db_file, master_addr,
                                   False if command == 'retransfer' else True)
                answer = create_answer(ret[0], ret[1])
            else:
                answer = create_answer(1, 'unknown command: ' + command)

        except XfrinException as err:
            answer = create_answer(1, str(err))

        return answer

    def _parse_cmd_params(self, args):
        zone_name = args.get('zone_name')
        if not zone_name:
            raise XfrinException('zone name should be provided')

        master = args.get('master')
        if not master:
            raise XfrinException('master address should be provided')

        port_str = args.get('port')
        if not port_str:
            port_str = DEFAULT_MASTER_PORT
        master_addrinfo = check_addr_port(master, port_str)

        db_file = args.get('db_file')
        if not db_file:
            #TODO, the db file path should be got in auth server's configuration
            # if we need access to this configuration more often, we
            # should add it on start, and not remove it here
            # (or, if we have writable ds, we might not need this in
            # the first place)
            self._cc.add_remote_config(AUTH_SPECFILE_LOCATION)
            db_file, is_default = self._cc.get_remote_config_value("Auth", "database_file")
            if is_default and "B10_FROM_BUILD" in os.environ:
                # this too should be unnecessary, but currently the
                # 'from build' override isn't stored in the config
                # (and we don't have writable datasources yet)
                db_file = os.environ["B10_FROM_BUILD"] + os.sep + "bind10_zones.sqlite3"
            self._cc.remove_remote_config(AUTH_SPECFILE_LOCATION)

        return (zone_name, master_addrinfo, db_file)

    def startup(self):
        while self._shutdown_flag == 0:
            self._cc_check_command()

    def _filter_hash(self, hash):
        '''delete zone_name in self._threads_zones or a socket in self._conn_sockets.'''
        keys = []
        for key in hash.keys():
            keys.append(key)

        for key in keys:
            if not (hash[key]).is_alive():
                del hash[key]

    def xfrin_start(self, zone_name, rrclass, db_file, master_addrinfo,
                    check_soa = True):
        if "libdns_python" not in sys.modules:
            return (1, "xfrin failed, can't load dns message python library: 'libdns_python'")

        # check max_transfer_in, else return quota error
        if len(self._threads_zones) >= self._max_transfers_in:
            self._filter_hash(self._threads_zones)
            self._filter_hash(self._conn_sockets)
            if len(self._threads_zones) >= self._max_transfers_in:
                return (1, 'xfrin quota error')

        # check whether the zone xfrin is in progress.
        if zone_name in self._threads_zones.keys():
            if not (self._threads_zones[zone_name]).is_alive():
                del self._threads_zones[zone_name]
            else:
                return (1, 'zone xfrin is in progress')
        conn_socket = socket.socketpair()
        xfrin_thread = threading.Thread(target = process_xfrin,
                                        args = (zone_name, rrclass,
                                                db_file,
                                                self._shutdown_flag,
                                                master_addrinfo, check_soa, conn_socket[1],
                                                self._verbose))

        # recored the zone name which zone xfrin is in process
        self._threads_zones[zone_name] = xfrin_thread
        self._conn_sockets[conn_socket[0]] = xfrin_thread
        xfrin_thread.start()
        return (0, 'zone xfrin is started')


xfrind = None

def signal_handler(signal, frame):
    if xfrind:
        xfrind.shutdown()
    sys.exit(0)

def set_signal_handler():
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

def check_addr_port(addrstr, portstr):
    # XXX: Linux (glibc)'s getaddrinfo incorrectly accepts numeric port
    # string larger than 65535.  So we need to explicit validate it separately.
    try:
        portnum = int(portstr)
        if portnum < 0 or portnum > 65535:
            raise ValueError("invalid port number (out of range): " + portstr)
    except ValueError as err:
        raise XfrinException("failed to resolve master address/port=%s/%s: %s" %
                             (addrstr, portstr, str(err)))

    try:
        addrinfo = socket.getaddrinfo(addrstr, portstr, socket.AF_UNSPEC,
                                      socket.SOCK_STREAM, socket.IPPROTO_TCP,
                                      socket.AI_NUMERICHOST|
                                      socket.AI_NUMERICSERV)
    except socket.gaierror as err:
        raise XfrinException("failed to resolve master address/port=%s/%s: %s" %
                             (addrstr, portstr, str(err)))
    if len(addrinfo) != 1:
        # with the parameters above the result must be uniquely determined.
        errmsg = "unexpected result for address/port resolution for %s:%s"
        raise XfrinException(errmsg % (addrstr, portstr))
    return addrinfo[0]

def set_cmd_options(parser):
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
            help="display more about what is going on")

def main(xfrin_class, use_signal = True):
    """The main loop of the Xfrin daemon.

    @param xfrin_class: A class of the Xfrin object.  This is normally Xfrin,
    but can be a subclass of it for customization.
    @param use_signal: True if this process should catch signals.  This is
    normally True, but may be disabled when this function is called in a
    testing context."""
    global xfrind

    try:
        parser = OptionParser(version = __version__)
        set_cmd_options(parser)
        (options, args) = parser.parse_args()

        if use_signal:
            set_signal_handler()
        xfrind = xfrin_class(verbose = options.verbose)
        xfrind.startup()
    except KeyboardInterrupt:
        log_error("exit b10-xfrin")
    except isc.cc.session.SessionError as e:
        log_error(str(e))
        log_error('Error happened! is the command channel daemon running?')
    except Exception as e:
        log_error(str(e))

    if xfrind:
        xfrind.shutdown()

if __name__ == '__main__':
    main(Xfrin)
